#lang scheme
(define (pasc row col)
  (cond ((or (= col 0) (< row col)) 0)
        ((= row 1) 1)
        (else (+ (pasc (- row 1) (- col 1)) (pasc (- row 1) col)))
  )
)

(define (pasc-line line)
  (define (row-print row col-count)
    (cond ((= col-count row) (display (pasc row col-count)) (display "\n"))
          ((= col-count 0) (row-print row (+ col-count 1)))
          (else (display (pasc row col-count)) (display " ") (row-print row (+ col-count 1)))
    )
  )
  (define (row-iter rows row-count)
    (cond ((= row-count rows) (row-print line 0))
          ((= row-count 0) (row-iter rows (+ row-count 1)))
          (else (row-print row-count 0) (row-iter rows (+ row-count 1)))
    )
  )
  (row-iter line 0)
)   
(pasc-line 15)