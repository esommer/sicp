#lang scheme
;Ackermann's function:
(define (A x y)
  (cond ((= y 0) (display "y = 0; return 0\n") 0)
        ((= x 0) (display "x = 0; return 2y = ") (display (* 2 y)) (display "\n") (* 2 y))
        ((= y 1) (display "y = 1; return 2\n") 2)
        (else (display "calculating A of ") (display (- x 1)) (display " and A of ") (display x) (display " and y = ") (display (- y 1)) (display "\n")
              (A (- x 1)
                 (A x (- y 1))))))
(A 1 10)
(display "= A of 1 and 10\n______________________________\n")
(A 2 4)
(display "= A of 2 and 4\n______________________________\n")
(A 3 3)
(display "= A of 3 and 3\n______________________________\n")
(display "\n\n\n")
(A 0 1)
(display "= A of 0 and 1\n______________________________\n")
(A 0 2)
(display "= A of 0 and 2\n______________________________\n")
(A 0 3)
(display "= A of 0 and 3\n______________________________\n")
(A 1 1)
(display "= A of 1 and 1\n______________________________\n")
(A 1 2)
(display "= A of 1 and 2\n______________________________\n")
(A 1 3)
(display "= A of 1 and 3\n______________________________\n")
(A 2 0)
(display "= A of 2 and 0\n______________________________\n")
(A 2 1)
(display "= A of 2 and 1\n______________________________\n")
(A 2 2)
(display "= A of 2 and 2\n______________________________\n")
(A 2 3)
(display "= A of 2 and 3\n______________________________\n")
(A 2 4)
(display "= A of 2 and 4\n______________________________\n")
